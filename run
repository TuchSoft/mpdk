#!/bin/bash

# --- Command Functions ---

# Initialization function
init() {
    git submodule update --init --recursive
    if [ $? -ne 0 ]; then
        echo "Error: Failed to update Git submodules. Please check your repository."
        return 1
    fi

    cp "$ROOT/local.yml" "$ROOT/moodle-docker/local.yml"

    if [ ! -d "zip" ]; then
        mkdir zip
    fi

    if [ ! -d "sites" ]; then
        mkdir sites
    fi

    echo "Project initialization complete!"
}


update() {
    rm -f "$ROOT/moodle-docker/local.yml"
    git clone
    init

    echo "Project update completed!"
}





up() {

    if [ -z "$1" ]; then
        echo -e "Specifica una porta\nUso: $0 up <versione> <porta> (es. $0 up 401 8080)"
        exit 1
    fi


    local VERSION=$1
    local PORT=$2
    local BIN="$ROOT/moodle-docker/bin/"
    local WWW="http://moodle$VERSION.test:$PORT"


    # Check if the port is already in use
    if is_port_in_use "$PORT"; then
        echo "Port $PORT is IN USE."
        exit 1
    fi

    # Determine mode (TESTING or DEVELOPMENT) based on VERSION
    if [[ "$VERSION" =~ "_testing" ]]; then
        echo "Running in TESTING mode"
        echo "It's probably gonna ask for your password to run correct permissions!"

        # Copy configuration file
        cp "$ROOT/moodle-docker/config.docker-template.php" "$MOODLE_PATH/config.php"

        # Start Moodle with Docker
        moodle_docker "up -d"

        # Install moodle-plugin-ci
        echo "Installing moodle-plugin-ci..."
        exec "curl -O https://getcomposer.org/composer.phar"
        exec "cp composer.phar /usr/local/bin/composer"
        exec "chmod +x /usr/local/bin/composer"
        exec "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash"
        exec "~/.nvm/nvm.sh install lts"
        exec "ln -s ~/.nvm/versions/node/v22.17.1/bin/* /usr/local/bin/"
        exec "/usr/local/bin/composer create-project moodlehq/moodle-plugin-ci /var/www/moodle-plugin-ci ^4"
        exec "ln -s /var/www/moodle-plugin-ci/bin/moodle-plugin-ci /usr/local/bin/moodle-plugin-ci"

        # Install dependencies
        echo "Installing Moodle dependencies..."
        exec "/usr/local/bin/composer -d /var/www/html install"

        # Ensure vendor files are executable (on the host)
        echo "Setting execute permissions for vendor binaries..."
        sudo chmod -R +x "$MOODLE_PATH/vendor/bin/"

        # Init Behat
        echo "Initializing Behat..."
        exec "php admin/tool/behat/cli/init.php --disable-composer=1"
        
        # Init PHPUnit
        echo "Initializing PHPUnit..."
        exec "php admin/tool/phpunit/cli/init.php --disable-composer=1"

        #Intall custom codestyle
        moodle_docker "cp $ROOT/moodle-cs.xml webserver:/var/www/"

    else
        echo "Running in DEVELOPMENT mode"

        # Remove existing config.php if it exists
        if [ -f "$MOODLE_PATH/config.php" ]; then
            echo "Removing existing config.php..."
            rm -rf "$MOODLE_PATH/config.php"
        fi

        # Start Docker containers for development mode
        
       moodle_tuchsoft "up -d"

        # Install Moodle database
        echo "Installing Moodle database for $PROJECT..."
        moodle_tuchsoft "exec server php admin/cli/install.php \
            --non-interactive \
            --agree-license \
            --fullname=\"$PROJECT\" \
            --shortname=\"$PROJECT\" \
            --summary=\"$PROJECT Docker moodle site\" \
            --adminpass=\"test\" \
            --adminemail=\"admin@example.com\" \
            --supportemail=\"support@example.com\" \
            --dbtype=\"pgsql\" \
            --dbhost=\"database\" \
            --dbname=\"moodle\" \
            --dbuser=\"moodle\" \
            --dbpass=\"moodle\" \
            --dbport=\"moodle\" \
            --wwwroot=\"$WWW\""
        echo "ADMIN PASSWORD: test"
        echo "Opening Moodle in browser: $WWW"
        open "$WWW"
    fi
}


check() {
    if [ -z "$1" ]; then
        echo -e "Specifica un plugin\nUso: $0 check <plugin> (es. $0 check local/myplugin)"
        exit 1
    fi

    local PLUGIN=$1

    if [[ ! "$VERSION" =~ "_testing" ]]; then
        echo "Devi usare una versione '_testing' per eseguire i check"
        exit 1
    fi


   
   
   PLUGIN="/var/www/html/$PLUGIN"

    moodle-plugin-ci "validate  -n $PLUGIN"     
    moodle-plugin-ci "mustache  -n $PLUGIN"
    moodle-plugin-ci "savepoints -n  $PLUGIN"
    moodle-plugin-ci "phplint  -n $PLUGIN"
    moodle-plugin-ci "phpmd -n  $PLUGIN"
    moodle-plugin-ci "phpcs  -n -s /var/www/moodle-cs.xml --todo-comment-regex=\"TODO:\" $PLUGIN"
    moodle-plugin-ci "phpdoc -n $PLUGIN"
    moodle-plugin-ci "grunt  -n -t gherkinlint $PLUGIN"
    moodle-plugin-ci "grunt  -n -t stylelint $PLUGIN"
}


test() {
    if [ -z "$1" ]; then
        echo -e "Specifica un plugin\nUso: $0 check <plugin> (es. $0 check local/myplugin)"
        exit 1
    fi

    local PLUGIN=$1

    if [[ ! "$VERSION" =~ "_testing" ]]; then
        echo "Devi usare una versione '_testing' per eseguire i check"
        exit 1
    fi
   
   CMD="exec webserver moodle-plugin-ci"
   PLUGIN="/var/www/html/$PLUGIN"

    moodle-plugin-ci "phpunit -n $PLUGIN"
    moodle-plugin-ci "behat -n $PLUGIN"
}


js() {
    if [ -z "$1" ]; then
        echo -e "Specifica un plugin\nUso: $0 js <plugin> [--force] (es. $0 js local/myplugin [--force])"
        exit 1
    fi

    local PLUGIN=$1

    if [[ ! "$VERSION" =~ "_testing" ]]; then
        echo "Devi usare una versione '_testing' per eseguire il comando"
        exit 1
    fi
   

    moodle-plugin-ci "grunt -n -t amd -t yui -m /var/www/html $2 $PLUGIN"
}


fix() {
    if [ -z "$1" ]; then
        echo -e "Specifica un plugin\nUso: $0 fix <plugin>  (es. $0 fix local/myplugin)"
        exit 1
    fi

    local PLUGIN=$1

    if [[ ! "$VERSION" =~ "_testing" ]]; then
        echo "Devi usare una versione '_testing' per eseguire il comando"
        exit 1
    fi
   

    moodle-plugin-ci "phpcbf -s /var/www/moodle-cs.xml -n $PLUGIN"
}


moodle_plugin_ci () {
    if [ -z "$1" ]; then
        echo -e "Specifica un comando\nUso: $0 moodle_plugin_ci <comando> [opzioni] (es. $0 moodle_plugin_ci validate)"
        exit 1
    fi

    if [[ ! "$VERSION" =~ "_testing" ]]; then
        echo "Devi usare una versione '_testing' per eseguire il comando"
        exit 1
    fi

    exec "moodle-plugin-ci $@"
}

exec() {
    if [ -z "$1" ]; then
        echo -e "Specifica un comando\nUso: $0 exec <comando> (es. $0 exec phpunit)"
        exit 1
    fi

    if [[ ! "$VERSION" =~ "_testing" ]]; then
        moodle_tuchsoft "exec server $@"
    else
        moodle_docker "exec webserver $@"
    fi

   
}


install_xdebug() {
    if [[ ! "$VERSION" =~ "_testing" ]]; then
        echo "Xdebug is already installed in the development version."
        exit 0
    fi
    
    exec "pecl install xdebug"
    moodle-docker cp "$ROOT/xdebug.ini" webserver:/usr/local/etc/php/conf.d/
    exec "docker-php-ext-enable xdebug"
    moodle-docker restart webserver
    
}








# --- Private Functions ---

# Function to check if a command exists
command_exists() {
    command -v "$1" &> /dev/null
}

# Function to check if a port is in use
is_port_in_use() {
    local port=$1
    if command_exists netstat; then
        netstat -tuln | grep -q ":$port\s"
    elif command_exists lsof; then
        lsof -i tcp:"$port" -sTCP:LISTEN &> /dev/null
    else
        echo "Warning: Neither 'netstat' nor 'lsof' found. Cannot check port availability." >&2
        return 1 # Assume port might be in use if we can't check
    fi
}


moodle_docker() {
    export COMPOSE_PROJECT_NAME=$PROJECT
    export MOODLE_DOCKER_WWWROOT="$ROOT/$VERSION"
    export MOODLE_DOCKER_DB=pgsql
    export MOODLE_DOCKER_WWWROOT="$MOODLE_PATH"
    export MOODLE_WEB_PORT="${PORT:-NULL}"
    
    $ROOT/moodle-docker/bin/moodle-docker-compose $@
}


moodle_tuchsoft() {
    export MOODLE_WEB_ROOT="$MOODLE_PATH" 
    export MOODLE_WEB_PORT="${PORT:-NULL}"

    docker compose -f "$ROOT/phpmoodle/docker-compose.yml" -p "$PROJECT" $@
}











# --- Main Script Logic ---

# Check for required commands (dependencies)
if ! command_exists netstat && ! command_exists lsof; then
    echo "Error: Neither 'netstat' nor 'lsof' command found. Please install net-tools or lsof."
    exit 1
fi

USE="Uso: $0 <comando> <versione> [argomenti]"
if [ -z "$1" ]; then
    echo -e "Specifica un comando\n$USE"
    exit 1
    fi

if [ -z "$2" ]; then
    echo -e "Specifica una versione\n$USE"
    exit 1
fi


# Globals
ROOT="/Users/mattiabonzi/Progetti/Moodle_versions"
COMMAND=$1
VERSION=$2
MOODLE_PATH="$ROOT/sites/$VERSION"
PROJECT="moodle-$VERSION"

# Validate project directory
if [ ! -d "$MOODLE_PATH" ]; then
    echo "Errore: La directory $MOODLE_PATH non esiste. Verifica che il progetto esista."
    exit 1
fi

# Shift arguments so that $1, $2, etc., now refer to the arguments *after* the command
shift 2

FUNCTION_CALL_COMMANDS=("up" "test" "check" "js" "fix" "ci" "exec")

if [[ " ${FUNCTION_CALL_COMMANDS[@]} " =~ " ${COMMAND} " ]]; then
    "$COMMAND" "$@"
    exit 0
fi

case "$COMMAND" in
    restart|down)
        echo "Use the docker GUI to $COMMAND the containers, you will find '$PROJECT' composer stack."
        ;;
    *)
        echo -e "Comando non riconosciuto: '$COMMAND'\n$USE"
        echo -e "Comandi disponibili: ${FUNCTION_CALL_COMMANDS[*]}, restart, down"
        exit 1
        ;;
esac

exit 0
